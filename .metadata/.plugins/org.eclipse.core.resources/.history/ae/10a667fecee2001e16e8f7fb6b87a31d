package br.com.magna.pizzaria.model.entities;

import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

import br.com.magna.pizzaria.model.enums.PizzaType;

public class Manager {

	private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
	private static LocalDate now = LocalDate.now();	
	private static Scanner scan = new Scanner(System.in);
	
	private static List<PizzaType> pizzaTypes = Arrays.asList(PizzaType.values());
	private static List<Flavor> flavorList = fillFlavorMenu();;
	private static Client client = null;
	
	public static void start() {
		int pos = 0;
		
		System.out.println("SEJA BEM-VINDO À PIZZARIA GENESIS\n");
	
		while(true) {
			switch(pos) {
			case 0:
				pos = mainMenu();
				break;
			case 1:				
				pos = registerClient();
				break;
			case 2:
				pos = printMenu();
				break;
			case 3:
				pos = selectItem();
				break;
			case 4:
				pos = viewCart();
				break;	
			case 5:
				pos = removeItemFromCart();
				break;
			case 6:
				pos = editItemFromCart();
				break;
			case 7:
				pos = finishOrder();
				break;
			default:
				System.out.println("Opção inválida!");
			}
		}
	}
	
	private static int mainMenu() {
		System.out.println("\nMENU PRINCIPAL");
		System.out.println("1 - Identificar cliente");
		System.out.println("2 - Ver cardápio");
		System.out.println("3 - Escolher pizza");
		System.out.print("Escolha uma opção: ");
		
		return scan.nextInt();
	}
	
	private static int registerClient() {
		if(client != null) {
			System.out.println("CLIENTE JÁ IDENTIFICADO!");
			return 0;
		};
		
		scan.nextLine();
		System.out.println("\nIDENTIFICAR CLIENTE");
		System.out.print("Nome: ");
		String clientName = scan.nextLine();
		System.out.print("Endereço: ");
		String clientAddress = scan.nextLine();
		System.out.print("Data de nascimento (dd/mm/yyyy): ");
		String clientBirthDate = scan.nextLine();
		
		LocalDate birthDate = LocalDate.parse(clientBirthDate, formatter);		
		Client customer = new Client(clientName, clientAddress, birthDate, new Order());
		
		registerCustomer(customer);
		
		System.out.println("CLIENTE IDENTIFICADO COM SUCESSO!");
		return 0;
	}
	
	private static void registerCustomer(Client clientToRegister) {
		System.out.println(surprise(clientToRegister.getBirthDate()));
		client = clientToRegister;	
	}
	
	private static int printMenu() {
		System.out.println("\nCARDÁPIO");		
		for(Flavor f : flavorList) {
			System.out.println(f + "\n");
		}
		return 0;
	}
	
	private static int selectItem() {
		if(client == null) {
			System.out.println("\nCLIENTE NÃO IDENTIFICADO");
			System.out.println("Você precisa se identificar para fazer um pedido!\n");
			return 0;
		};
		
		int typeIndex = selectType();
		List<Flavor> flavors = selectFlavors(typeIndex);
		
		addItem(flavors, typeIndex);				
	
		return 4;
	}
	
	private static int selectType() {
		int typeIndex;
		
		while(true) {
			System.out.println("\nESCOLHER PIZZA");
			System.out.println("1 - Grande, 8 pedaços");
			System.out.println("2 - Grande. 8 pedaços. dois sabores");
			System.out.println("3 - Broto, 4 pedaços");
			System.out.println("4 - Broto, 4 pedaços, dois sabores");
			typeIndex = scan.nextInt();
			
			if(typeIndex < 1 || typeIndex > 4) {
				System.out.println("Opção inválida!");
				scan.nextLine();
				continue;
			}
			break;
		}
		
		return typeIndex;
	}
	
	private static List<Flavor> selectFlavors(int type) {
		List<Flavor> list = new ArrayList<>();
		int flavorIndex;
		
		while(true) {
			System.out.println("\nESCOLHER SABOR");
			Menu.printPizzaList();
			
			System.out.print("Escolha algum sabor: ");
			flavorIndex = scan.nextInt();
			
			if(flavorIndex < 1 || flavorIndex > flavorList.size()) {
				System.out.println("Opção inválida!");
				scan.nextLine();
				continue;
			}
			break;
		}
		
		list.add(flavorList.get(flavorIndex - 1));
			
		if(type == 2 || type == 4) {
			while(true) {
				System.out.print("Escolha outro sabor: ");
				flavorIndex = scan.nextInt();
				if(flavorIndex < 1 || flavorIndex > flavorList.size()) {
					System.out.println("Opção inválida!");
					scan.nextLine();
					continue;
				}
				break;
			}
			
			list.add(flavorList.get(flavorIndex - 1));
		}
		
		return list;
	}
	
	private static void addItem(List<Flavor> flavorList, int typeIndex) {
		PizzaType pizzaType = pizzaTypes.get(typeIndex - 1);
		Item pizza = new Item(pizzaType, flavorList);
		
		client.getOrder().addItem(pizza);
	}
	
	
	private static int viewCart() {
		System.out.println("\nCARRINHO");
		System.out.println(client.getOrder().getItemListString());
		System.out.println("TOTAL R$" + String.format("%.2f", client.getOrder().getTotal()) + "\n");
	
		System.out.println("1 - Concluir pedido");
		System.out.println("2 - Adicionar mais itens");
		System.out.println("3 - Remover item");
		System.out.println("4 - Editar item");
		
		int option = scan.nextInt();
		
		switch(option) {
		case 1:
			return 7;
		case 2:
			return 3;
		case 3:
			return 5;
		case 4:
			return 6;
		default:
			System.out.println("Opção inválida!");
			break;
		}
		
		return 4;
	}
	
	private static int removeItemFromCart() {
		if(client.getOrder().getItemList().isEmpty()) {
			System.out.println("Não é possível remover itens pois seu carrinho está vazio!");
			return 4;
		}
		
		String itemToRemove;
		
		System.out.println("\nREMOVER");
		System.out.println(client.getOrder().getItemListString());
		
		while(true) {
			System.out.println("Qual item deseja remover?");
			System.out.println("(Digite x para cancelar)");
			System.out.print("> ");
			scan.nextLine();
			itemToRemove = scan.nextLine();
			
			if(itemToRemove.charAt(0) == 'x') {
				return 4;
			}
			
			if(Integer.valueOf(itemToRemove) > client.getOrder().getItemList().size()) {
				System.out.println("Opção inválida!");
				continue;
			}
			
			break;
		}

		client.getOrder().removeItem(Integer.valueOf(itemToRemove) - 1);
		System.out.println("Item removido com sucesso!");
		return 4;
	}
	
	private static int editItemFromCart() {
		if(client.getOrder().getItemList().isEmpty()) {
			System.out.println("Não é possível editar itens pois seu carrinho está vazio!");
			return 4;
		}
		
		System.out.println("\nEDITAR");
		System.out.println(client.getOrder().getItemListString());
		String itemToEditIndex;
		
		while(true) {
			System.out.println("Qual item deseja editar? ");	
			System.out.println("(Digite x para cancelar)");
			System.out.print("> ");
			scan.nextLine();
			itemToEditIndex = scan.nextLine();
			
			if(itemToEditIndex.charAt(0) == 'x') {
				return 4;
			}
			
			if(Integer.valueOf(itemToEditIndex) > client.getOrder().getItemList().size()) {
				System.out.println("Opção inválida!");
				scan.nextLine();
				continue;
			}
			
			break;
		}
			
		Item itemToEdit = client.getOrder().getItemById(Integer.valueOf(itemToEditIndex) - 1);
	
		System.out.println("Qual atributo deseja editar?");
		System.out.println("1 - Tipo da pizza");
		System.out.println("2 - Sabor(es)");
		System.out.println("3 - Cancelar");
		System.out.print("> ");
		int choice = scan.nextInt();
	
		switch(choice) {
		case 1: {
			int editedPizzaTypeIndex;
			while(true) {
				System.out.println("\nESCOLHER PIZZA");
				System.out.println("1 - Grande, 8 pedaços");
				System.out.println("2 - Grande. 8 pedaços. dois sabores");
				System.out.println("3 - Broto, 4 pedaços");
				System.out.println("4 - Broto, 4 pedaços, dois sabores");
				editedPizzaTypeIndex = scan.nextInt();
				
				if(editedPizzaTypeIndex < 1 || editedPizzaTypeIndex > 4) {
					System.out.println("Opção inválida!");
					scan.nextLine();
					continue;
				}
				break;
			}
			
			PizzaType type = pizzaTypes.get(editedPizzaTypeIndex - 1);
			itemToEdit.selectPizzaType(type);
			
			client.getOrder().editItem(Integer.valueOf(itemToEditIndex) - 1, itemToEdit);
			return 4;
		}
		case 2: {
			int editedFlavorIndex;
			while(true) {
				System.out.println("\nESCOLHER SABOR");
				Menu.printPizzaList();
				System.out.print("Escolha algum sabor: ");
				editedFlavorIndex = scan.nextInt();
				
				if(editedFlavorIndex < 1 || editedFlavorIndex > flavorList.size() - 1) {
					System.out.println("Opção inválida!");
					scan.nextLine();
					continue;
				}
				break;
			}
			
			itemToEdit.selectFlavor(flavorList.get(editedFlavorIndex - 1));
			System.out.println("[" + flavorList.get(editedFlavorIndex - 1).getName() + " adicionado!]");
				
			if(Integer.valueOf(itemToEditIndex) == 2 || Integer.valueOf(itemToEditIndex) == 4) {
				while(true) {
					System.out.print("Escolha outro sabor: ");
					editedFlavorIndex = scan.nextInt();
					if(editedFlavorIndex < 1 || editedFlavorIndex > 15) {
						System.out.println("Opção inválida!");
						scan.nextLine();
						continue;
					}
					break;
				}
				
				itemToEdit.selectFlavor(flavorList.get(editedFlavorIndex - 1));
				System.out.println("[" + flavorList.get(editedFlavorIndex - 1).getName() + " adicionado!]");
			}
			
			return 4;
		}
			
		case 3: return 4;
		default:
			System.out.println("Opção inválida!");
			return 4;
		}		
	}
	
	private static int finishOrder() {
		if(client.getOrder().getItemList().isEmpty()) {
			System.out.println("Não é possível concluir seu pedido pois seu carrinho está vazio!");
			return 4;
		}
		System.out.println(client.getOrder().generateReceipt());
		System.out.println("Agradecemos pelo pedido!\n");
		
		client.getOrder().getItemList().clear();
		return 0;
	}

	private static String surprise(LocalDate date) {
		if(date.getDayOfMonth() == now.getDayOfMonth() && date.getMonthValue() == now.getMonthValue()) {
			for(Flavor f : flavorList) {
				f.giveDiscount();
			}
			
			StringBuilder sb = new StringBuilder();

			try(Scanner scan = new Scanner(new File("util/happybirthday.txt"))){
				while(scan.hasNextLine()) {
					String line = scan.nextLine();
					
					sb.append(line + "\n");
				}
				
				sb.append("\nParabéns! Você recebeu um desconto de 10% em todos os sabores!");
			}catch(Exception e) {
				throw new RuntimeException(e);
			}
			
			return sb.toString();
		}
		else if(now.getYear() - date.getYear() > 100) {
			StringBuilder sb = new StringBuilder();

			try(Scanner scan = new Scanner(new File("util/skull.txt"))){
				while(scan.hasNextLine()) {
					String line = scan.nextLine();
					
					sb.append(line + "\n");
				}	
			}catch(Exception e) {
				throw new RuntimeException(e);
			}
			
			return sb.toString();
		}
		
		return "";
	}
		
	private static List<Flavor> fillFlavorMenu() {	
		List<Flavor> tempPizzaList = new ArrayList<>();
		
		try(Scanner scan = new Scanner(new File("util/pizza.txt"))){
			while(scan.hasNextLine()) {
				String line = scan.nextLine();
				
				String[] fields = line.split(";");
				
				String name = fields[0];
				String ingredients = fields[1];
				double price = Double.valueOf(fields[2]);
				
				Flavor pizza = new Flavor(name, ingredients, price);
				
				tempPizzaList.add(pizza);
			}
		}catch(Exception e) {
			throw new RuntimeException(e);
		}
		
		return tempPizzaList;
	}
	
	public static List<Flavor> getFlavorList(){
		return flavorList;
	}
}
